#include "kabukinai.h"
#include <stdio.h>
#include <math.h>


const float input_pixels[] = {
0.00,0.00,0.00,1.00,2.00,0.00,
0.00,0.00,12.00,13.00,14.00,0.00,
0.00,0.00,24.00,25.00,26.00,0.00,
0.00,0.00,9.00,9.75,10.50,0.00,
0.00,0.00,9.00,9.75,10.50,0.00,
0.00,0.00,9.00,9.75,10.50,0.00,
0.00,0.00,0.00,0.00,0.00,0.00,
0.00,0.00,0.00,0.00,0.00,0.00,
0.00,0.00,5.00,4.00,3.00,0.00,
0.00,0.00,17.00,16.00,15.00,0.00,
0.00,0.00,29.00,28.00,27.00,0.00,
0.00,0.00,12.75,12.00,11.25,0.00,
0.00,0.00,12.75,12.00,11.25,0.00,
0.00,0.00,12.75,12.00,11.25,0.00,
0.00,0.00,0.00,0.00,0.00,0.00,
0.00,0.00,0.00,0.00,0.00,0.00,
0.00,0.00,6.00,7.00,8.00,0.00,
0.00,0.00,18.00,19.00,20.00,0.00,
0.00,0.00,30.00,31.00,32.00,0.00,
0.00,0.00,13.50,14.25,15.00,0.00,
0.00,0.00,13.50,14.25,15.00,0.00,
0.00,0.00,13.50,14.25,15.00,0.00,
0.00,0.00,0.00,0.00,0.00,0.00,
0.00,0.00,0.00,0.00,0.00,0.00,
0.00,0.00,11.00,10.00,9.00,0.00,
0.00,0.00,23.00,22.00,21.00,0.00,
0.00,0.00,35.00,34.00,33.00,0.00,
0.00,0.00,17.25,16.50,15.75,0.00,
0.00,0.00,17.25,16.50,15.75,0.00,
0.00,0.00,17.25,16.50,15.75,0.00,
0.00,0.00,0.00,0.00,0.00,0.00,
0.00,0.00,0.00,0.00,0.00,0.00};

const float expected[] = {
0.292537,0.099997,2.547023,1.011727,2.223398,1.082156,
-0.718359,-0.393198,11.987610,12.060932,15.443868,-0.665012,
0.958011,1.064159,21.849594,23.257477,19.677704,-0.172055,
0.633711,-1.031506,14.652798,7.058044,15.468176,1.765859,
0.536290,-0.490243,7.669050,8.756481,14.109276,1.213296,
-2.234327,-1.089947,12.359431,16.425615,10.694674,0.588705,
1.510971,2.235805,0.327351,-1.059749,1.071133,1.052392,
-0.822750,0.234497,-0.513914,-1.693993,-0.514168,0.667740,
2.008866,-1.402928,12.457059,1.541605,-0.229994,3.373061,
-1.327456,0.163858,16.570103,9.928611,20.322605,-0.438159,
0.138794,8.287679,36.073555,21.073355,19.595579,-3.613410,
-1.553488,1.659093,12.136343,6.003592,16.943913,2.659934,
1.917384,-2.844775,16.951912,13.494850,5.346412,-2.115396,
2.542999,-6.635194,14.287512,16.689579,9.838671,2.863960,
-0.941228,0.912856,-1.430431,5.714240,0.760651,-8.609213,
1.493058,0.296673,-1.811391,2.006790,-0.789726,8.060435,
9.619566,-15.530652,-5.850703,25.024445,11.418756,-11.470285,
-8.773389,19.059185,-7.227345,9.008286,14.546082,-8.824087,
-9.808059,20.725857,28.080650,38.101448,33.006157,-1.510183,
9.476400,0.934203,0.777033,-5.130699,19.047565,3.587730,
5.312819,13.341254,20.450460,29.685394,15.169670,-2.169824,
2.260872,-6.844841,33.810596,12.008884,8.206279,1.247949,
16.302868,-24.878571,14.000453,10.671902,-6.603129,1.535176,
-5.129990,3.234784,10.179520,-5.580436,2.845238,2.110672,
0.000000,0.000000,9.286292,6.566182,7.775569,0.000000,
0.000000,0.000000,20.388441,24.419439,15.711951,0.000000,
0.000000,0.000000,36.490414,36.890797,29.711845,0.000000,
0.000000,0.000000,16.470402,27.901445,17.045338,0.000000,
0.000000,0.000000,17.965940,16.340857,16.791107,0.000000,
0.000000,0.000000,22.418732,12.258885,10.075480,0.000000,
0.000000,0.000000,0.000000,0.000000,0.000000,0.000000,
0.000000,0.000000,0.000000,0.000000,0.000000,0.000000};

float noises[] = {1.0, 10.0, 100.0, 0.0};

int main() {
	simulation_data d;
	float image_pixels[4*8*6];	// enough to hold sliced image
	
	
	PANIC_ON_BAD_CUDA_STATUS(cudaMalloc((void **) &d.image_pixels, 4*8*6*sizeof(float)));
	PANIC_ON_BAD_CUDA_STATUS(cudaMemcpy(d.image_pixels, input_pixels,
		4*8*6*sizeof(float),cudaMemcpyHostToDevice));
	d.dimensions[0] = 3;
	d.dimensions[1] = 12;
	d.number_of_slices = 4;
	d.early_dark_pixels = 2;
	d.late_dark_pixels = 1;
	d.smear_rows = 3;
	d.final_dark_rows = 2;
	d.read_noise_variance = noises;
	d.random_seed = 0;
	d.random_offset = 0;
	
	printf( "Calling add_noise: " );
	add_noise( &d );
	printf( "success!\n" );
	
	
	PANIC_ON_BAD_CUDA_STATUS(cudaMemcpy(image_pixels, d.image_pixels,
		4*8*6*sizeof(float),cudaMemcpyDeviceToHost));
	
	int result = KABUKINAI_SUCCESS;

	for( int i = 0; i < 4*8*6; i+=1 ) {
		if( fabsf(image_pixels[i] - expected[i] ) > 1e-6) {
			printf( "At pixel %d expected %f got %f\n", i, expected[i], image_pixels[i] );
			result = KABUKINAI_FAILURE;
		}
	}

	
	return result;
}
